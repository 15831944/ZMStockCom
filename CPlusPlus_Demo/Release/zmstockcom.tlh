// Created by Microsoft (R) C/C++ Compiler Version 10.00.40219.01 (fabb247c).
//
// m:\src\sdk\zmstockcom\cplusplus_demo\release\zmstockcom.tlh
//
// C++ source equivalent of Win32 type library ..\\Bin\\ZMStockCom.exe
// compiler-generated file created 04/23/17 at 11:49:26 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("9f3a40ba-ceaf-4db4-bd2f-effcbbc8bf59"))
/* LIBID */ __ZMStockCom;
struct __declspec(uuid("1353cdac-755e-43ec-a2f7-ba89e07b8801"))
/* dispinterface */ _ITradeEvents;
enum EZMExchangeType;
struct /* coclass */ StockTrade;
struct __declspec(uuid("d4addbb6-df5b-4920-ba71-1d751868b81d"))
/* dual interface */ IStockTrade;
enum EZMTradeErrType;
enum EZMBrokerType;
enum EZMLoginAccountType;
struct __declspec(uuid("c179293b-8134-4aea-a272-c9b520c67d38"))
/* dual interface */ ITradeRecord;
enum EZMDataType;
enum EZMStockOrderType;
enum EZMOrderPriceType;
enum EZMRunPriType;
enum EZMTradeType;
enum EZMStockQueryType;
enum EZMHisOrderType;
struct __declspec(uuid("51d41530-7daa-419b-8201-ec14e23a44f3"))
/* dispinterface */ _IMarketEvents;
struct /* coclass */ Market;
struct __declspec(uuid("3393ca57-da3e-492e-a814-58b50d9d58ce"))
/* dual interface */ IMarket;
enum EZMMarketType;
enum EZMBarType;
struct __declspec(uuid("ce515ed5-961d-41f6-88f8-1018afd9d1f7"))
/* dispinterface */ _IMarketExEvents;
struct /* coclass */ MarketEx;
struct __declspec(uuid("a3c785d2-0d23-4ede-af06-3bae2bac328e"))
/* dual interface */ IMarketEx;
struct __declspec(uuid("483b66e7-2219-4901-9faf-c3b70ac1164b"))
/* dispinterface */ _IMarketLevel2Events;
struct /* coclass */ MarketLevel2;
struct __declspec(uuid("047157b4-b8d4-4fdc-89f4-e9cda7f8d061"))
/* dual interface */ IMarketLevel2;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_ITradeEvents, __uuidof(_ITradeEvents));
_COM_SMARTPTR_TYPEDEF(ITradeRecord, __uuidof(ITradeRecord));
_COM_SMARTPTR_TYPEDEF(IStockTrade, __uuidof(IStockTrade));
_COM_SMARTPTR_TYPEDEF(_IMarketEvents, __uuidof(_IMarketEvents));
_COM_SMARTPTR_TYPEDEF(IMarket, __uuidof(IMarket));
_COM_SMARTPTR_TYPEDEF(_IMarketExEvents, __uuidof(_IMarketExEvents));
_COM_SMARTPTR_TYPEDEF(IMarketEx, __uuidof(IMarketEx));
_COM_SMARTPTR_TYPEDEF(_IMarketLevel2Events, __uuidof(_IMarketLevel2Events));
_COM_SMARTPTR_TYPEDEF(IMarketLevel2, __uuidof(IMarketLevel2));

//
// Type library items
//

struct __declspec(uuid("1353cdac-755e-43ec-a2f7-ba89e07b8801"))
_ITradeEvents : IDispatch
{};

enum EZMExchangeType
{
    EXCHANGETYPE_UNKNOWN = 0,
    EXCHANGETYPE_SZ = 1,
    EXCHANGETYPE_SH = 2
};

struct __declspec(uuid("5663a83d-6b62-4e17-9499-d0f7a9a39367"))
StockTrade;
    // [ default ] interface IStockTrade
    // [ default, source ] dispinterface _ITradeEvents

enum EZMTradeErrType
{
    TRADEERRTYPE_SUCCESS = 0,
    TRADEERRTYPE_INVALIDARG = 1,
    TRADEERRTYPE_MEMORYERR = 2,
    TRADEERRTYPE_LOGICERR = 3
};

enum EZMBrokerType
{
    BROKERTYPE_UNKNOWN = 0,
    BROKERTYPE_CJZQ = 1,
    BROKERTYPE_DYCY = 2,
    BROKERTYPE_DGZQ = 3,
    BROKERTYPE_GXZQ = 4,
    BROKERTYPE_LHZQ = 6,
    BROKERTYPE_PAZQ = 7,
    BROKERTYPE_GFZQ = 12,
    BROKERTYPE_DTZQ = 13,
    BROKERTYPE_HXZQ = 14,
    BROKERTYPE_XYZQ = 15,
    BROKERTYPE_ZSZQ = 16,
    BROKERTYPE_JYDT = 17,
    BROKERTYPE_ZXJT = 18,
    BROKERTYPE_YNHT = 19,
    BROKERTYPE_CCZQ = 20,
    BROKERTYPE_HYZQ = 21,
    BROKERTYPE_GTJA = 22,
    BROKERTYPE_SJZQ = 23,
    BROKERTYPE_AXZQ = 24,
    BROKERTYPE_CFZQ = 25,
    BROKERTYPE_DXZQ = 26,
    BROKERTYPE_YHZQ = 27,
    BROKERTYPE_GDZQ = 28,
    BROKERTYPE_YDZQ = 29,
    BROKERTYPE_DBZQ = 30,
    BROKERTYPE_NJZQ = 31,
    BROKERTYPE_ZXZQ = 32,
    BROKERTYPE_SHZQ = 33,
    BROKERTYPE_HBZQ = 34,
    BROKERTYPE_AJZQ = 35,
    BROKERTYPE_QLZQ = 36,
    BROKERTYPE_ZYGJ = 37,
    BROKERTYPE_MZZQ = 38,
    BROKERTYPE_XCZQ = 39,
    BROKERTYPE_GJZQ = 40,
    BROKERTYPE_SCZQ = 41,
    BROKERTYPE_GLZQ = 42,
    BROKERTYPE_HLZQ = 43,
    BROKERTYPE_HFZQ = 44,
    BROKERTYPE_GYZQ = 45,
    BROKERTYPE_GZZQ = 46,
    BROKERTYPE_FZZQ = 47,
    BROKERTYPE_BHZQ = 48,
    BROKERTYPE_XNZQ = 49,
    BROKERTYPE_XSDZQ = 50,
    BROKERTYPE_ZTZQ = 51,
    BROKERTYPE_HRZQ = 52,
    BROKERTYPE_SYWG = 53,
    BROKERTYPE_SHXZQ = 54,
    BROKERTYPE_JLDB = 56,
    BROKERTYPE_MSZQ = 57,
    BROKERTYPE_SXDT = 58,
    BROKERTYPE_ZCZQ = 59,
    BROKERTYPE_XMZQ = 60,
    BROKERTYPE_DFZQ = 61,
    BROKERTYPE_YTZQ = 62,
    BROKERTYPE_JLDT = 67,
    BROKERTYPE_WHZQ = 68,
    BROKERTYPE_GKZQ = 69,
    BROKERTYPE_ZXWT = 70,
    BROKERTYPE_XDZQ = 71,
    BROKERTYPE_WKZQ = 72,
    BROKERTYPE_JHZQ = 73,
    BROKERTYPE_HCZQ = 74,
    BROKERTYPE_TPYZQ = 75,
    BROKERTYPE_GHZQ = 76,
    BROKERTYPE_DHZQ = 77,
    BROKERTYPE_XBZQ = 78,
    BROKERTYPE_SXZQ = 79,
    BROKERTYPE_KYZQ = 80,
    BROKERTYPE_HAHX = 81,
    BROKERTYPE_GSZQ = 83,
    BROKERTYPE_ZJZXJT = 84,
    BROKERTYPE_SCHX = 85,
    BROKERTYPE_WLZQ = 89,
    BROKERTYPE_LNZT = 90,
    BROKERTYPE_NMHT = 92,
    BROKERTYPE_TFZQ = 93,
    BROKERTYPE_GSHL = 94,
    BROKERTYPE_RXZQ = 95,
    BROKERTYPE_ZHZQ = 96,
    BROKERTYPE_CTZQ = 98,
    BROKERTYPE_HTZQ = 102,
    BROKERTYPE_DWZQ = 103,
    BROKERTYPE_ZJZS = 104,
    BROKERTYPE_LXZQ = 106,
    BROKERTYPE_SHHX = 107,
    BROKERTYPE_XZTX = 109,
    BROKERTYPE_ZYZQ = 110,
    BROKERTYPE_BJGD = 111,
    BROKERTYPE_ZJZQ = 114,
    BROKERTYPE_SXZY = 116,
    BROKERTYPE_MNCS = 117,
    BROKERTYPE_MNCP = 118
};

enum EZMLoginAccountType
{
    LOGINIACCOUNTTYPE_SZA = 0,
    LOGINIACCOUNTTYPE_SHA = 1,
    LOGINIACCOUNTTYPE_SZB = 2,
    LOGINIACCOUNTTYPE_SHB = 3,
    LOGINIACCOUNTTYPE_CAPITAL = 8,
    LOGINIACCOUNTTYPE_CUSTOMER = 9,
    LOGINIACCOUNTTYPE_THREEBOARD = 12,
    LOGINIACCOUNTTYPE_MNCS = 50
};

enum EZMDataType
{
    ZMDATATYPE_UNKNOW = 0,
    ZMDATATYPE_INTEGER = 1,
    ZMDATATYPE_FLOAT = 2,
    ZMDATATYPE_DATE = 4,
    ZMDATATYPE_TEXT = 8,
    ZMDATATYPE_BLOB = 16
};

struct __declspec(uuid("c179293b-8134-4aea-a272-c9b520c67d38"))
ITradeRecord : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FieldCount (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall GetFieldName (
        /*[in]*/ long lFieldIndex,
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall GetDataType (
        /*[in]*/ long lFieldIndex,
        /*[out,retval]*/ enum EZMDataType * pVal ) = 0;
      virtual HRESULT __stdcall GetValue (
        /*[in]*/ long lRecordIndex,
        /*[in]*/ long lFieldIndex,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall GetValueByName (
        /*[in]*/ long lRecordIndex,
        /*[in]*/ BSTR bstrFieldName,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall GetValueInt (
        /*[in]*/ long lRecordIndex,
        /*[in]*/ long lFieldIndex,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall GetValueString (
        /*[in]*/ long lRecordIndex,
        /*[in]*/ long lFieldIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall GetValueFloat (
        /*[in]*/ long lRecordIndex,
        /*[in]*/ long lFieldIndex,
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall GetValueDate (
        /*[in]*/ long lRecordIndex,
        /*[in]*/ long lFieldIndex,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall GetJsonString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
};

enum EZMStockOrderType
{
    STOCKORDERTYPE_UNKNOWN = 0,
    STOCKORDERTYPE_BUY = 1,
    STOCKORDERTYPE_SALE = 2,
    STOCKORDERTYPE_FINANCINGBUY = 3,
    STOCKORDERTYPE_SECURITIESLENDINGSALE = 4,
    STOCKORDERTYPE_BUYTORETURNSECURITY = 5,
    STOCKORDERTYPE_SALETORETURNMONEY = 6,
    STOCKORDERTYPE_SECURITYTORETURN = 7
};

enum EZMOrderPriceType
{
    ORDERPRICETYPE_UNKNOWN = 0,
    ORDERPRICETYPE_LIMIT = 1,
    ORDERPRICETYPE_SZMARKETSELLERBEST = 2,
    ORDERPRICETYPE_SZMARKETBUYERBEST = 3,
    ORDERPRICETYPE_SZMARKETOKTOCANCEL = 4,
    ORDERPRICETYPE_MARKETFIVETOCANCEL = 5,
    ORDERPRICETYPE_SZMARKETTOGETHER = 6,
    ORDERPRICETYPE_SHMARKETFIVETOLIMIT = 7
};

enum EZMRunPriType
{
    RUNPRITYPE_UNKNOWN = 0,
    RUNPRITYPE_ABOVE_NORMAL = 1,
    RUNPRITYPE_NORMAL = 2,
    RUNPRITYPE_BELOW_NORMAL = 3
};

enum EZMTradeType
{
    TRADETYPE_UNKNOWN = 0,
    TRADETYPE_BUY = 1,
    TRADETYPE_SELL = 2,
    TRADETYPE_BUYANDSELL = 4
};

enum EZMStockQueryType
{
    STOCKQUERYTYPE_UNKNOWN = 0,
    STOCKQUERYTYPE_CAPITAL = 1,
    STOCKQUERYTYPE_STOCK = 2,
    STOCKQUERYTYPE_TODAYORDER = 3,
    STOCKQUERYTYPE_TODAYTRADE = 4,
    STOCKQUERYTYPE_TODAYCANREVOKE = 5,
    STOCKQUERYTYPE_SHAREHOLDERCODE = 6,
    STOCKQUERYTYPE_BALANCEOFFINANCING = 7,
    STOCKQUERYTYPE_BORROWFUNDLEFT = 8,
    STOCKQUERYTYPE_CANBORROWFUND = 9,
    STOCKQUERYTYPE_CANNEWSTOCK = 13,
    STOCKQUERYTYPE_CANNEWSTOCKLIMIT = 14,
    STOCKQUERYTYPE_ASSIGNNUMBER = 15,
    STOCKQUERYTYPE_BALLOT = 16
};

enum EZMHisOrderType
{
    HISORDERTYPE_UNKNOWN = 0,
    HISORDERTYPE_TRUST = 1,
    HISORDERTYPE_TRADE = 2,
    HISORDERTYPE_DELIVERYORDER = 3
};

struct __declspec(uuid("d4addbb6-df5b-4920-ba71-1d751868b81d"))
IStockTrade : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LastErrType (
        /*[out,retval]*/ enum EZMTradeErrType * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EnableLog (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLog (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ValidDate (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_CreditAccount (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CreditAccount (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_AutoKeepConn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoKeepConn (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoTryCount (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoTryCount (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_AutoReportSuccess (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoReportSuccess (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConfigFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConfigFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ServerConfig (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ServerConfig (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ServerCount (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall get_CurServerHost (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CurServerHost (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CurServerPort (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_CurServerPort (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_DepartmentID (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_DepartmentID (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_BrokerType (
        /*[out,retval]*/ enum EZMBrokerType * pVal ) = 0;
      virtual HRESULT __stdcall put_BrokerType (
        /*[in]*/ enum EZMBrokerType pVal ) = 0;
      virtual HRESULT __stdcall get_AccountType (
        /*[out,retval]*/ enum EZMLoginAccountType * pVal ) = 0;
      virtual HRESULT __stdcall put_AccountType (
        /*[in]*/ enum EZMLoginAccountType pVal ) = 0;
      virtual HRESULT __stdcall get_LoginID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LoginID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TradeAccount (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TradeAccount (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall put_TradePassword (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_CommPassword (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_ConnectValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CurTradeID (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall get_NextTradeID (
        /*[in]*/ unsigned short nBeginTradeID,
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall get_ShareHolderCode (
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CapitalInfo (
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall Init (
        /*[in]*/ BSTR bstrVersion,
        /*[in]*/ unsigned short nMaxConn ) = 0;
      virtual HRESULT __stdcall LogIn (
        /*[in]*/ VARIANT_BOOL bAsynFlag,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall SyncCommitOrder (
        /*[in]*/ VARIANT_BOOL bAutoCheckConn,
        /*[in]*/ enum EZMStockOrderType eOrderType,
        /*[in]*/ enum EZMOrderPriceType ePriceType,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ float ftPrice,
        /*[in]*/ unsigned long nCount,
        /*[out]*/ enum EZMExchangeType * peExchangeType,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall AddOrder (
        /*[in]*/ enum EZMStockOrderType eOrderType,
        /*[in]*/ enum EZMOrderPriceType ePriceType,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ float ftPrice,
        /*[in]*/ unsigned long nCount,
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall CommitOrder (
        /*[in]*/ unsigned short nTradeID,
        /*[in]*/ VARIANT_BOOL bAutoCheckConn,
        /*[in]*/ enum EZMRunPriType ePriType,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall ClearCommit ( ) = 0;
      virtual HRESULT __stdcall CancelOrder (
        /*[in]*/ enum EZMExchangeType eExchangeType,
        /*[in]*/ unsigned long nOrderID,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall CancelAllOrder (
        /*[in]*/ enum EZMTradeType eTradeType,
        /*[in]*/ DATE dtInTime,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall RePay (
        /*[in]*/ unsigned long nAmount,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall BuyIPO (
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall QueryTradeData (
        /*[in]*/ unsigned short nTradeID,
        /*[in]*/ enum EZMStockQueryType eOrderType,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall QueryHisTradeData (
        /*[in]*/ unsigned short nTradeID,
        /*[in]*/ enum EZMHisOrderType eHisOrderType,
        /*[in]*/ BSTR bstrStartDay,
        /*[in]*/ BSTR bstrEndDay,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetStockQuote (
        /*[in]*/ unsigned short nTradeID,
        /*[in]*/ BSTR bstrStockCode,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetStockQuotes (
        /*[in]*/ unsigned short nTradeID,
        /*[in]*/ BSTR bstrStockCodes,
        /*[in]*/ enum EZMRunPriType ePriType,
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall GetTradableCount (
        /*[in]*/ unsigned short nTradeID,
        /*[in]*/ enum EZMStockOrderType eHisOrderType,
        /*[in]*/ enum EZMOrderPriceType ePriceType,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ float ftPrice,
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall LogOut (
        /*[in]*/ unsigned short nTradeID ) = 0;
      virtual HRESULT __stdcall GetLoginPara (
        /*[in]*/ BSTR bstrBrokerName,
        /*[in]*/ BSTR bstrDeptName,
        /*[out,retval]*/ BSTR * pJsonVal ) = 0;
};

struct __declspec(uuid("51d41530-7daa-419b-8201-ec14e23a44f3"))
_IMarketEvents : IDispatch
{};

struct __declspec(uuid("f6451564-814d-44e9-a747-f6f2083d7a48"))
Market;
    // [ default ] interface IMarket
    // [ default, source ] dispinterface _IMarketEvents

enum EZMMarketType
{
    MARKETTYPE_UNKNOWN = 0,
    MARKETTYPE_TEMPSTOCK = 1,
    MARKETTYPE_ZZFO = 4,
    MARKETTYPE_DLFO = 5,
    MARKETTYPE_SHFO = 6,
    MARKETTYPE_CFFEXO = 7,
    MARKETTYPE_SHSO = 8,
    MARKETTYPE_BASEER = 10,
    MARKETTYPE_CROSSER = 11,
    MARKETTYPE_STOCKQ = 12,
    MARKETTYPE_IPM = 13,
    MARKETTYPE_LME = 14,
    MARKETTYPE_LIPE = 15,
    MARKETTYPE_COMEX = 16,
    MARKETTYPE_NYO = 17,
    MARKETTYPE_CV = 18,
    MARKETTYPE_TOCOM = 19,
    MARKETTYPE_NYBOT = 20,
    MARKETTYPE_HMI = 27,
    MARKETTYPE_ZZF = 28,
    MARKETTYPE_DLF = 29,
    MARKETTYPE_SHF = 30,
    MARKETTYPE_SEHK = 31,
    MARKETTYPE_OEF = 33,
    MARKETTYPE_MMF = 34,
    MARKETTYPE_MSCI = 37,
    MARKETTYPE_MT = 38,
    MARKETTYPE_MF = 39,
    MARKETTYPE_CCS = 40,
    MARKETTYPE_WUSS = 41,
    MARKETTYPE_CRB = 42,
    MARKETTYPE_BTH = 43,
    MARKETTYPE_STS = 44,
    MARKETTYPE_SHGE = 46,
    MARKETTYPE_CFFE = 47,
    MARKETTYPE_HMGEM = 48,
    MARKETTYPE_ICHKX = 49,
    MARKETTYPE_BOCE = 50,
    MARKETTYPE_ND = 54,
    MARKETTYPE_SPF = 56,
    MARKETTYPE_CAMP = 57,
    MARKETTYPE_BMW = 58,
    MARKETTYPE_MAINFC = 60,
    MARKETTYPE_CSI = 62,
    MARKETTYPE_EPI = 70,
    MARKETTYPE_USSTOCK = 74,
    MARKETTYPE_QILU = 76,
    MARKETTYPE_SIMEX = 77
};

enum EZMBarType
{
    ZMBARTYPE_UNKNOW = 0,
    ZMBARTYPE_5MINUTE = 1,
    ZMBARTYPE_15MINUTE = 2,
    ZMBARTYPE_30MINUTE = 3,
    ZMBARTYPE_1HOUR = 4,
    ZMBARTYPE_1DAY = 5,
    ZMBARTYPE_1WEEK = 6,
    ZMBARTYPE_1MONTH = 7,
    ZMBARTYPE_1MINUTE = 8,
    ZMBARTYPE_DAY = 10,
    ZMBARTYPE_1QUARTER = 11,
    ZMBARTYPE_1MYEAR = 12
};

struct __declspec(uuid("3393ca57-da3e-492e-a814-58b50d9d58ce"))
IMarket : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LastErrType (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EnableLog (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLog (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoKeepConn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoKeepConn (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ReadTimeout (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_ReadTimeout (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_WriteTimeout (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_WriteTimeout (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_ServerConfig (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ServerConfig (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ConfigFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConfigFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CurServerHost (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CurServerHost (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CurServerPort (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_CurServerPort (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_CurConnID (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall get_NextConnID (
        /*[in]*/ unsigned short nBeginConnID,
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall Init (
        /*[in]*/ unsigned short nMaxConn ) = 0;
      virtual HRESULT __stdcall Connect (
        /*[in]*/ VARIANT_BOOL bAsynFlag ) = 0;
      virtual HRESULT __stdcall GetSecurityCount (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall GetSecurityList (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetSecurityQuote (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ BSTR bstrStockCode,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetSecurityQuotes (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ BSTR bstrStockCodes,
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall GetSecurityBars (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMBarType eBarType,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nStart,
        /*[out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetIndexBars (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMBarType eBarType,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nStart,
        /*[out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetMinuteTimeData (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetHisMinuteTimeData (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nDate,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetTransData (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nDate,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetHisTransData (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nDate,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetCompanyInfoIndex (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ BSTR bstrStockCode,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetCompanyInfoContent (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ BSTR bstrStockCode,
        /*[in]*/ BSTR bstrFileName,
        /*[in]*/ unsigned short nStart,
        /*[in]*/ unsigned short nLength,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetXdxRInfo (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetFinanceInfo (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall Disconnect (
        /*[in]*/ unsigned short nConnID ) = 0;
};

struct __declspec(uuid("ce515ed5-961d-41f6-88f8-1018afd9d1f7"))
_IMarketExEvents : IDispatch
{};

struct __declspec(uuid("2f436d16-07cf-492e-b057-e8598b6aeafd"))
MarketEx;
    // [ default ] interface IMarketEx
    // [ default, source ] dispinterface _IMarketExEvents

struct __declspec(uuid("a3c785d2-0d23-4ede-af06-3bae2bac328e"))
IMarketEx : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LastErrType (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EnableLog (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLog (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoKeepConn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoKeepConn (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ReadTimeout (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_ReadTimeout (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_WriteTimeout (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_WriteTimeout (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_ServerConfig (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ServerConfig (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ConfigFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConfigFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CurServerHost (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CurServerHost (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CurServerPort (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_CurServerPort (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_CurConnID (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall get_NextConnID (
        /*[in]*/ unsigned short nBeginConnID,
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall Init (
        /*[in]*/ unsigned short nMaxConn ) = 0;
      virtual HRESULT __stdcall Connect (
        /*[in]*/ VARIANT_BOOL bAsynFlag ) = 0;
      virtual HRESULT __stdcall GetMarkets (
        /*[in]*/ unsigned short nConnID,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetBreedCount (
        /*[in]*/ unsigned short nConnID,
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall GetBreedInfo (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetBreedQuote (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetBreedQuotes (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdms,
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall GetBreedBars (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMBarType eBarType,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetMinuteTimeData (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetHisMinuteTimeData (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nDate,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetTransData (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nDate,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetHisTransData (
        /*[in]*/ unsigned short nConnID,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nDate,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall Disconnect (
        /*[in]*/ unsigned short nConnID ) = 0;
};

struct __declspec(uuid("483b66e7-2219-4901-9faf-c3b70ac1164b"))
_IMarketLevel2Events : IDispatch
{};

struct __declspec(uuid("d7b2c51f-d6ce-4ef4-98c3-fa9551569941"))
MarketLevel2;
    // [ default ] interface IMarketLevel2
    // [ default, source ] dispinterface _IMarketLevel2Events

struct __declspec(uuid("047157b4-b8d4-4fdc-89f4-e9cda7f8d061"))
IMarketLevel2 : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LastErrType (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrDesc (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EnableLog (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnableLog (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoKeepConn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoKeepConn (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ReadTimeout (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_ReadTimeout (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_WriteTimeout (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_WriteTimeout (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_Level2UserName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Level2UserName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall put_Level2UserPW (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_ServerConfig (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ServerConfig (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ConfigFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ConfigFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CurServerHost (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CurServerHost (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CurServerPort (
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall put_CurServerPort (
        /*[in]*/ unsigned short pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall Init (
        /*[in]*/ unsigned short nMaxThread ) = 0;
      virtual HRESULT __stdcall Connect (
        /*[in]*/ VARIANT_BOOL bAsynFlag ) = 0;
      virtual HRESULT __stdcall GetSecurityCount (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[out,retval]*/ unsigned short * pVal ) = 0;
      virtual HRESULT __stdcall GetSecurityList (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetSecurityQuote (
        /*[in]*/ BSTR bstrStockCode,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetSecurityQuotes (
        /*[in]*/ BSTR bstrStockCodes,
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall GetSecurityBars (
        /*[in]*/ enum EZMBarType eBarType,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetIndexBars (
        /*[in]*/ enum EZMBarType eBarType,
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetMinuteTimeData (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetHisMinuteTimeData (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nDate,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetTransData (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nDate,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetHisTransData (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nDate,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetCompanyInfoIndex (
        /*[in]*/ BSTR bstrStockCode,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetCompanyInfoContent (
        /*[in]*/ BSTR bstrStockCode,
        /*[in]*/ BSTR bstrFileName,
        /*[in]*/ unsigned short nStart,
        /*[in]*/ unsigned short nLength,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetXdxRInfo (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetFinanceInfo (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetSecurityQuote10 (
        /*[in]*/ BSTR bstrStockCode,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetSecurityQuotes10 (
        /*[in]*/ BSTR bstrStockCodes,
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall GetDetailTransData (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetDetailOrderData (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[in]*/ unsigned short nStart,
        /*[in,out]*/ unsigned short * pCount,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall GetBuySellList (
        /*[in]*/ enum EZMMarketType eMarket,
        /*[in]*/ BSTR bstrZqdm,
        /*[out,retval]*/ struct ITradeRecord * * ppVal ) = 0;
      virtual HRESULT __stdcall Disconnect ( ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_ZMStockCom =
    {0x9f3a40ba,0xceaf,0x4db4,{0xbd,0x2f,0xef,0xfc,0xbb,0xc8,0xbf,0x59}};
extern "C" const GUID __declspec(selectany) DIID__ITradeEvents =
    {0x1353cdac,0x755e,0x43ec,{0xa2,0xf7,0xba,0x89,0xe0,0x7b,0x88,0x01}};
extern "C" const GUID __declspec(selectany) CLSID_StockTrade =
    {0x5663a83d,0x6b62,0x4e17,{0x94,0x99,0xd0,0xf7,0xa9,0xa3,0x93,0x67}};
extern "C" const GUID __declspec(selectany) IID_ITradeRecord =
    {0xc179293b,0x8134,0x4aea,{0xa2,0x72,0xc9,0xb5,0x20,0xc6,0x7d,0x38}};
extern "C" const GUID __declspec(selectany) IID_IStockTrade =
    {0xd4addbb6,0xdf5b,0x4920,{0xba,0x71,0x1d,0x75,0x18,0x68,0xb8,0x1d}};
extern "C" const GUID __declspec(selectany) DIID__IMarketEvents =
    {0x51d41530,0x7daa,0x419b,{0x82,0x01,0xec,0x14,0xe2,0x3a,0x44,0xf3}};
extern "C" const GUID __declspec(selectany) CLSID_Market =
    {0xf6451564,0x814d,0x44e9,{0xa7,0x47,0xf6,0xf2,0x08,0x3d,0x7a,0x48}};
extern "C" const GUID __declspec(selectany) IID_IMarket =
    {0x3393ca57,0xda3e,0x492e,{0xa8,0x14,0x58,0xb5,0x0d,0x9d,0x58,0xce}};
extern "C" const GUID __declspec(selectany) DIID__IMarketExEvents =
    {0xce515ed5,0x961d,0x41f6,{0x88,0xf8,0x10,0x18,0xaf,0xd9,0xd1,0xf7}};
extern "C" const GUID __declspec(selectany) CLSID_MarketEx =
    {0x2f436d16,0x07cf,0x492e,{0xb0,0x57,0xe8,0x59,0x8b,0x6a,0xea,0xfd}};
extern "C" const GUID __declspec(selectany) IID_IMarketEx =
    {0xa3c785d2,0x0d23,0x4ede,{0xaf,0x06,0x3b,0xae,0x2b,0xac,0x32,0x8e}};
extern "C" const GUID __declspec(selectany) DIID__IMarketLevel2Events =
    {0x483b66e7,0x2219,0x4901,{0x9f,0xaf,0xc3,0xb7,0x0a,0xc1,0x16,0x4b}};
extern "C" const GUID __declspec(selectany) CLSID_MarketLevel2 =
    {0xd7b2c51f,0xd6ce,0x4ef4,{0x98,0xc3,0xfa,0x95,0x51,0x56,0x99,0x41}};
extern "C" const GUID __declspec(selectany) IID_IMarketLevel2 =
    {0x047157b4,0xb8d4,0x4fdc,{0x89,0xf4,0xe9,0xcd,0xa7,0xf8,0xd0,0x61}};

#pragma pack(pop)
